# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import mapreduce_pb2 as mapreduce__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in mapreduce_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MapReduceStub(object):
    """All the functions we will make use of
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitJob = channel.unary_unary(
                '/mapreduce.MapReduce/SubmitJob',
                request_serializer=mapreduce__pb2.JobRequest.SerializeToString,
                response_deserializer=mapreduce__pb2.JobResponse.FromString,
                _registered_method=True)
        self.AssignMapTask = channel.unary_unary(
                '/mapreduce.MapReduce/AssignMapTask',
                request_serializer=mapreduce__pb2.Empty.SerializeToString,
                response_deserializer=mapreduce__pb2.MapTaskRequest.FromString,
                _registered_method=True)
        self.AssignReduceTask = channel.unary_unary(
                '/mapreduce.MapReduce/AssignReduceTask',
                request_serializer=mapreduce__pb2.Empty.SerializeToString,
                response_deserializer=mapreduce__pb2.ReduceTaskRequest.FromString,
                _registered_method=True)
        self.ReportMapResult = channel.unary_unary(
                '/mapreduce.MapReduce/ReportMapResult',
                request_serializer=mapreduce__pb2.MapResult.SerializeToString,
                response_deserializer=mapreduce__pb2.Ack.FromString,
                _registered_method=True)
        self.ReportReduceResult = channel.unary_unary(
                '/mapreduce.MapReduce/ReportReduceResult',
                request_serializer=mapreduce__pb2.ReduceResult.SerializeToString,
                response_deserializer=mapreduce__pb2.Ack.FromString,
                _registered_method=True)


class MapReduceServicer(object):
    """All the functions we will make use of
    """

    def SubmitJob(self, request, context):
        """Client → Master
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignMapTask(self, request, context):
        """Worker → Master
        The worker is asking the master: “Do you have any map work for me?”
        The master replies with the task.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignReduceTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportMapResult(self, request, context):
        """The worker sends the result to the master.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportReduceResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapReduceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitJob': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitJob,
                    request_deserializer=mapreduce__pb2.JobRequest.FromString,
                    response_serializer=mapreduce__pb2.JobResponse.SerializeToString,
            ),
            'AssignMapTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignMapTask,
                    request_deserializer=mapreduce__pb2.Empty.FromString,
                    response_serializer=mapreduce__pb2.MapTaskRequest.SerializeToString,
            ),
            'AssignReduceTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignReduceTask,
                    request_deserializer=mapreduce__pb2.Empty.FromString,
                    response_serializer=mapreduce__pb2.ReduceTaskRequest.SerializeToString,
            ),
            'ReportMapResult': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportMapResult,
                    request_deserializer=mapreduce__pb2.MapResult.FromString,
                    response_serializer=mapreduce__pb2.Ack.SerializeToString,
            ),
            'ReportReduceResult': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportReduceResult,
                    request_deserializer=mapreduce__pb2.ReduceResult.FromString,
                    response_serializer=mapreduce__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mapreduce.MapReduce', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mapreduce.MapReduce', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MapReduce(object):
    """All the functions we will make use of
    """

    @staticmethod
    def SubmitJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mapreduce.MapReduce/SubmitJob',
            mapreduce__pb2.JobRequest.SerializeToString,
            mapreduce__pb2.JobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignMapTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mapreduce.MapReduce/AssignMapTask',
            mapreduce__pb2.Empty.SerializeToString,
            mapreduce__pb2.MapTaskRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignReduceTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mapreduce.MapReduce/AssignReduceTask',
            mapreduce__pb2.Empty.SerializeToString,
            mapreduce__pb2.ReduceTaskRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportMapResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mapreduce.MapReduce/ReportMapResult',
            mapreduce__pb2.MapResult.SerializeToString,
            mapreduce__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportReduceResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mapreduce.MapReduce/ReportReduceResult',
            mapreduce__pb2.ReduceResult.SerializeToString,
            mapreduce__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
